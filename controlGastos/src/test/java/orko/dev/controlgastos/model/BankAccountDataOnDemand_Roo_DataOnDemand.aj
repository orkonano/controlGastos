// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package orko.dev.controlgastos.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import orko.dev.controlgastos.model.BankAccount;
import orko.dev.controlgastos.model.BankAccountDataOnDemand;
import orko.dev.controlgastos.model.BankAccountType;
import orko.dev.controlgastos.model.security.Principal;
import orko.dev.controlgastos.repository.BankAccountRepository;
import orko.dev.controlgastos.service.BankAccountService;

privileged aspect BankAccountDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BankAccountDataOnDemand: @Component;
    
    private Random BankAccountDataOnDemand.rnd = new SecureRandom();
    
    private List<BankAccount> BankAccountDataOnDemand.data;
    
    @Autowired
    BankAccountService BankAccountDataOnDemand.bankAccountService;
    
    @Autowired
    BankAccountRepository BankAccountDataOnDemand.bankAccountRepository;
    
    public BankAccount BankAccountDataOnDemand.getNewTransientBankAccount(int index) {
        BankAccount obj = new BankAccount();
        setBank(obj, index);
        setBankAccountType(obj, index);
        setDescription(obj, index);
        setUser(obj, index);
        return obj;
    }
    
    public void BankAccountDataOnDemand.setBank(BankAccount obj, int index) {
        String bank = "bank_" + index;
        obj.setBank(bank);
    }
    
    public void BankAccountDataOnDemand.setBankAccountType(BankAccount obj, int index) {
        BankAccountType bankAccountType = BankAccountType.class.getEnumConstants()[0];
        obj.setBankAccountType(bankAccountType);
    }
    
    public void BankAccountDataOnDemand.setDescription(BankAccount obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void BankAccountDataOnDemand.setUser(BankAccount obj, int index) {
        Principal user = null;
        obj.setUser(user);
    }
    
    public BankAccount BankAccountDataOnDemand.getSpecificBankAccount(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        BankAccount obj = data.get(index);
        Long id = obj.getId();
        return bankAccountService.findBankAccount(id);
    }
    
    public BankAccount BankAccountDataOnDemand.getRandomBankAccount() {
        init();
        BankAccount obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return bankAccountService.findBankAccount(id);
    }
    
    public boolean BankAccountDataOnDemand.modifyBankAccount(BankAccount obj) {
        return false;
    }
    
    public void BankAccountDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = bankAccountService.findBankAccountEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'BankAccount' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<BankAccount>();
        for (int i = 0; i < 10; i++) {
            BankAccount obj = getNewTransientBankAccount(i);
            try {
                bankAccountService.saveBankAccount(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            bankAccountRepository.flush();
            data.add(obj);
        }
    }
    
}
