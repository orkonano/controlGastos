// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package orko.dev.controlgastos.model;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import orko.dev.controlgastos.model.BankAccount;
import orko.dev.controlgastos.model.BankAccountDataOnDemand;
import orko.dev.controlgastos.model.Budget;
import orko.dev.controlgastos.model.BudgetDataOnDemand;
import orko.dev.controlgastos.model.EconomicFact;
import orko.dev.controlgastos.model.EconomicFactDataOnDemand;
import orko.dev.controlgastos.model.Entry;
import orko.dev.controlgastos.model.EntryDataOnDemand;
import orko.dev.controlgastos.model.security.Principal;
import orko.dev.controlgastos.repository.EconomicFactRepository;
import orko.dev.controlgastos.service.EconomicFactService;

privileged aspect EconomicFactDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EconomicFactDataOnDemand: @Component;
    
    private Random EconomicFactDataOnDemand.rnd = new SecureRandom();
    
    private List<EconomicFact> EconomicFactDataOnDemand.data;
    
    @Autowired
    private BankAccountDataOnDemand EconomicFactDataOnDemand.bankAccountDataOnDemand;
    
    @Autowired
    private BudgetDataOnDemand EconomicFactDataOnDemand.budgetDataOnDemand;
    
    @Autowired
    private EntryDataOnDemand EconomicFactDataOnDemand.entryDataOnDemand;
    
    @Autowired
    EconomicFactService EconomicFactDataOnDemand.economicFactService;
    
    @Autowired
    EconomicFactRepository EconomicFactDataOnDemand.economicFactRepository;
    
    public EconomicFact EconomicFactDataOnDemand.getNewTransientEconomicFact(int index) {
        EconomicFact obj = new EconomicFact();
        setAmount(obj, index);
        setBankAccount(obj, index);
        setBudget(obj, index);
        setDate(obj, index);
        setDescription(obj, index);
        setEntry(obj, index);
        setUser(obj, index);
        return obj;
    }
    
    public void EconomicFactDataOnDemand.setAmount(EconomicFact obj, int index) {
        BigDecimal amount = BigDecimal.valueOf(index);
        if (amount.compareTo(new BigDecimal("99999.99")) == 1) {
            amount = new BigDecimal("99999.99");
        }
        obj.setAmount(amount);
    }
    
    public void EconomicFactDataOnDemand.setBankAccount(EconomicFact obj, int index) {
        BankAccount bankAccount = bankAccountDataOnDemand.getRandomBankAccount();
        obj.setBankAccount(bankAccount);
    }
    
    public void EconomicFactDataOnDemand.setBudget(EconomicFact obj, int index) {
        Budget budget = budgetDataOnDemand.getRandomBudget();
        obj.setBudget(budget);
    }
    
    public void EconomicFactDataOnDemand.setDate(EconomicFact obj, int index) {
        Date date = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDate(date);
    }
    
    public void EconomicFactDataOnDemand.setDescription(EconomicFact obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void EconomicFactDataOnDemand.setEntry(EconomicFact obj, int index) {
        Entry entry = entryDataOnDemand.getRandomEntry();
        obj.setEntry(entry);
    }
    
    public void EconomicFactDataOnDemand.setUser(EconomicFact obj, int index) {
        Principal user = null;
        obj.setUser(user);
    }
    
    public EconomicFact EconomicFactDataOnDemand.getSpecificEconomicFact(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        EconomicFact obj = data.get(index);
        Long id = obj.getId();
        return economicFactService.findEconomicFact(id);
    }
    
    public EconomicFact EconomicFactDataOnDemand.getRandomEconomicFact() {
        init();
        EconomicFact obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return economicFactService.findEconomicFact(id);
    }
    
    public boolean EconomicFactDataOnDemand.modifyEconomicFact(EconomicFact obj) {
        return false;
    }
    
    public void EconomicFactDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = economicFactService.findEconomicFactEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'EconomicFact' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<EconomicFact>();
        for (int i = 0; i < 10; i++) {
            EconomicFact obj = getNewTransientEconomicFact(i);
            try {
                economicFactService.saveEconomicFact(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            economicFactRepository.flush();
            data.add(obj);
        }
    }
    
}
