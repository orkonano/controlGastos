// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package orko.dev.controlgastos.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import orko.dev.controlgastos.model.Entry;
import orko.dev.controlgastos.model.EntryDataOnDemand;
import orko.dev.controlgastos.model.EntryType;
import orko.dev.controlgastos.model.security.Principal;
import orko.dev.controlgastos.repository.EntryRepository;
import orko.dev.controlgastos.service.EntryService;

privileged aspect EntryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EntryDataOnDemand: @Component;
    
    private Random EntryDataOnDemand.rnd = new SecureRandom();
    
    private List<Entry> EntryDataOnDemand.data;
    
    @Autowired
    EntryService EntryDataOnDemand.entryService;
    
    @Autowired
    EntryRepository EntryDataOnDemand.entryRepository;
    
    public Entry EntryDataOnDemand.getNewTransientEntry(int index) {
        Entry obj = new Entry();
        setAttributable(obj, index);
        setDescription(obj, index);
        setEntryType(obj, index);
        setFather(obj, index);
        setPriority(obj, index);
        setUser(obj, index);
        return obj;
    }
    
    public void EntryDataOnDemand.setAttributable(Entry obj, int index) {
        Boolean attributable = Boolean.TRUE;
        obj.setAttributable(attributable);
    }
    
    public void EntryDataOnDemand.setDescription(Entry obj, int index) {
        String description = "description_" + index;
        if (description.length() > 200) {
            description = description.substring(0, 200);
        }
        obj.setDescription(description);
    }
    
    public void EntryDataOnDemand.setEntryType(Entry obj, int index) {
        EntryType entryType = EntryType.class.getEnumConstants()[0];
        obj.setEntryType(entryType);
    }
    
    public void EntryDataOnDemand.setFather(Entry obj, int index) {
        Entry father = obj;
        obj.setFather(father);
    }
    
    public void EntryDataOnDemand.setPriority(Entry obj, int index) {
        Integer priority = new Integer(index);
        if (priority < 1) {
            priority = 1;
        }
        obj.setPriority(priority);
    }
    
    public void EntryDataOnDemand.setUser(Entry obj, int index) {
        Principal user = null;
        obj.setUser(user);
    }
    
    public Entry EntryDataOnDemand.getSpecificEntry(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Entry obj = data.get(index);
        Long id = obj.getId();
        return entryService.findEntry(id);
    }
    
    public Entry EntryDataOnDemand.getRandomEntry() {
        init();
        Entry obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return entryService.findEntry(id);
    }
    
    public boolean EntryDataOnDemand.modifyEntry(Entry obj) {
        return false;
    }
    
    public void EntryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = entryService.findEntryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Entry' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Entry>();
        for (int i = 0; i < 10; i++) {
            Entry obj = getNewTransientEntry(i);
            try {
                entryService.saveEntry(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            entryRepository.flush();
            data.add(obj);
        }
    }
    
}
